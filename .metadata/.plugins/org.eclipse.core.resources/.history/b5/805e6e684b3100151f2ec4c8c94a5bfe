package treesAndTreeLikeStructures;

import java.util.ArrayList;

public class Tree<T> {
	private T value;
	private Tree<T> parent;
	private ArrayList<Tree<T>> children;
	
	public Tree(T value) {
		if (value == null) {
			throw new IllegalArgumentException(
			"Cannot insert null value!");
		}
		this.value = value;
	}
	
	@SuppressWarnings("unchecked")
	public Tree(T value, Tree<T> ...children) {
		this.value = value;
		this.setChildren(new ArrayList<Tree<T>>());
		
		for (Tree<T> child : children) {
			this.getChildren().add(child);
			child.parent = this;
		}
	}
	
	//dictionary to map nodes by their value
	private static Tree<T> getTreeNodeByValue(
			T value, Map<T, Tree<T>> nodeByValue) {
		if (!nodeByValue.containsKey(value)) {
			nodeByValue.put(value, new Tree<Integer>(value));
		}
		return nodeByValue.get(value);
	}
	
	public T getValue() {
		return value;
	}

	public void setValue(T value) {
		this.value = value;
	}

	public Tree<T> getParent() {
		return parent;
	}

	public void setParent(Tree<T> parent) {
		this.parent = parent;
	}

	public ArrayList<Tree<T>> getChildren() {
		return children;
	}

	public void setChildren(ArrayList<Tree<T>> children) {
		this.children = children;
	}
}
