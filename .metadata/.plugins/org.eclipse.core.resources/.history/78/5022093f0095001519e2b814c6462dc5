package problem3FileSystem;

import java.util.*;

public class FileSystemTest {

	public static void main(String[] args) {
		Device device = new Device();
        Directory current = new Directory();
        StringBuilder output = new StringBuilder();

        Scanner input = new Scanner(System.in);
        String command = input.nextLine();
        if (command.startsWith("new")) {
            String commandAtributes = command.substring("new".length() + 1);
            String[] tokens = commandAtributes.split(",");
            device = new Device(tokens[0], new Directory(tokens[1], Calendar.getInstance().getTime()));
            current = device.getRoot();
            output.append("Device created – " + device.getName() + ", " + device.getRoot() + "\n");
        }

        command = Console.ReadLine();
        while (command != "end")
        {
            if (command.StartsWith("md"))
            {
                Directory newDirectory = MakeDirectory(command);
                current.AddDirectory(newDirectory);
                output.AppendLine("Directory made - " + newDirectory.Name);
            }
            else if (command.StartsWith("cd"))
            {
                if (command == "cd ..")
                {
                    current = current.Parrent;
                }
                else
                {
                    string dirName = command.Substring("cd".Length + 1).Trim();
                    foreach (var dir in current.Directories)
                    {
                        if (dir.Name == dirName)
                        {
                            current = dir;
                        }
                    }
                }
                output.AppendLine("Directory changed - " + current.Name);
            }
            else if (command.StartsWith("dir"))
            {
                output.Append(current.GetFilesAndDirs());
            }
            else if (command == "cur")
            {
                output.AppendLine(current.Name);
            }
            else if (command.StartsWith("nf"))
            {
                output.AppendLine("File created – " + NewFile(command, current));

            }
            else if (command.StartsWith("rf"))
            {
                output.AppendLine(ReadFile(command, current));
            }
            else if (command.StartsWith("all"))
            {
                output.Append(device.ToString());
            }

            command = Console.ReadLine();
        }

        Console.WriteLine(output);
	}

	static Directory MakeDirectory(string command) {
		string commandAtributes = command.Substring("md".Length + 1);
		string[] tokens = commandAtributes.Split(',');
		Directory result = new Directory(tokens[0], DateTime.Now);
		return result;
	}

	static string NewFile(string command, Directory current)
    {
        string cmdAtributes = command.Substring("nf".Length + 1);
        string[] tokens = cmdAtributes.Split('.');

        string content = Console.ReadLine();

        if (tokens[1] == "txt")
        {
            TextFile newFile = new TextFile(tokens[0], DateTime.Now, DateTime.Now, content);
            current.AddFile(newFile);
            return newFile.ToString();
        }
        else
        {
            string[] bytes = content.Split(' ');
            byte[] bytesContent = new byte[bytes.Length];

            for (int i = 0; i < bytes.Length; i++)
            {
                bytesContent[i] = byte.Parse(bytes[i]);
            }

            BinaryFile newFile = new BinaryFile(tokens[0], DateTime.Now, DateTime.Now, bytesContent);
            current.AddFile(newFile);
            return newFile.ToString();
        }
    }

	static string ReadFile(string command, Directory currnet)
    {
        string fileName = command.Substring("rf".Length + 1).Trim(); ;

        File file = null;
        foreach (var f in currnet.Files)
        {
            if (f.Name == fileName || f.ToString() == fileName)
            {
                file = f;
                break;
            }
        }

        if (file.Type == FilesType.Text)
        {
            return file.Content as string;
        }

        StringBuilder result = new StringBuilder();
        foreach (var b in file.Content as byte[])
        {
            result.Append((byte)b + " ");
        }

        return result.ToString();
    }
}
