package pacman;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.logging.Level;

public class Level extends Drawable {

	private int rows, columns, score;

	private MapSpot[][] levelContent;

	public Level(String fileOfLevel) {
		readLevelFromFile(fileOfLevel);
		color = new Color(150, 100, 5);
		score = totalScoreInLevel();
	}

	private int totalScoreInLevel() {
		int sum = 0;
		PacDot pacDot = Game.getPacDot();
		PowerDot powerDot = Game.getPowerDot();
		for (int i = 0; i < levelContent.length; i++) {
			for (int j = 0; j < levelContent[i].length; j++) {
				if (levelContent[i][j].hasDot()) {
					sum += pacDot.getScore();
				} else if (levelContent[i][j].hasPowerDot()) {
					sum += powerDot.getScore();
				}
			}
		}
		return sum;
	}

	private void readLevelFromFile(String fileOfLevel) {
		Scanner fileInput = null;
		try {
			// Create scanner with the Cyrillic encoding
			fileInput = new Scanner(new File(fileOfLevel), "Windows-1251");
			fileInput.nextLine();
			String line = fileInput.nextLine();
			String[] parsedLine = line.split(" ");
			rows = Integer.parseInt(parsedLine[0]);
			columns = Integer.parseInt(parsedLine[1]);
			levelContent = new MapSpot[rows][columns];
			fileInput.nextLine();
			while (fileInput.hasNextLine()) {
				line = fileInput.nextLine();
				parsedLine = line.split(" ");
				levelContent[Integer.parseInt(parsedLine[0])][Integer
						.parseInt(parsedLine[1])] = new MapSpot(
						parsedLine[2].equals("1"), parsedLine[3].equals("1"),
						parsedLine[4].equals("1"), parsedLine[5].equals("1"),
						parsedLine[6].equals("1"), parsedLine[7].equals("1"));
			}
		} catch (FileNotFoundException fnfe) {
			System.err.println(fnfe.getMessage());
		} finally {
			if (null != fileInput) {
				fileInput.close();
			}
		}
	}

	public MapSpot[][] getLevelContent() {
		return levelContent;
	}

	public void setLevelContent(MapSpot[][] levelContent) {
		this.levelContent = levelContent;
	}

	public int getRows() {
		return rows;
	}

	public int getColumns() {
		return columns;
	}



	public void checkMazeForDots() {

		short i = 0;
		boolean finished = true;

		while (i < nrofblocks * nrofblocks && finished) {

			if ((screendata[i] & 48) != 0) {
				finished = false;
			}

			i++;
		}

		if (finished) {

			score = 0;
			remainingTimeForKill = 1;
			initLevel();
		}
	}

}
