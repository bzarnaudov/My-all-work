package stacksAndQueues;

public class Problem3ArrayBasedStack {
	private int top;
    private int[] storage;

    public Problem3ArrayBasedStack(int capacity) {
        if (capacity <= 0) {
              throw new IllegalArgumentException("Stack's capacity must be positive");
        }
        storage = new int[capacity];
        top = -1;

    }

    public int capacity() {
    	return storage.length;
    }

    void push(int value) {
        if (top == storage.length) {
              throw new StackException("Stack's underlying storage is overflow");
        }
        top++;
        storage[top] = value;
    }

    public int peek() {
        if (top == -1) {
              throw new StackException("Stack is empty");
        }
        return storage[top];
    }
    
    void pop() {
        if (top == -1) {
              throw new StackException("Stack is empty");
        }
        top--;
    }



    boolean isEmpty() {

          return (top == -1);

    }



    public class StackException extends RuntimeException {

		private static final long serialVersionUID = 1L;

		public StackException(String message) {

                super(message);

          }

    }
}
