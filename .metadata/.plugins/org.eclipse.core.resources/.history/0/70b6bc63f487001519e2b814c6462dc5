package all;

import java.util.*;

public class Problem3WordLabirinth {
	private char[][] lab;
    private boolean[][] visited;
    private List<Character> path = new ArrayList<Character>();
    private HashMap<String, String> paths =  new HashMap<String, String>();

    
    public Problem3WordLabirinth(int n) {
		super();
		this.lab = new char[n][n];
		this.visited = new boolean[n][n];
		this.path = path;
		this.paths = paths;
	}

	static bool InRange(int row, int col)
    {
        bool rowInRange = row >= 0 && row < lab.GetLength(0);
        bool colInRange = col >= 0 && col < lab.GetLength(1);
        return rowInRange && colInRange;
    }

    static void FindPathToExit(int row, int col)
    {
        if (!InRange(row, col))
        {
            SavePath();
            return;
        }
        path.Add(lab[row, col]);

        if (Char.IsLetter(lab[row, col]) == true && visited[row,col]==false)
        {
            visited[row, col] = true;

            FindPathToExit(row, col - 1);
            FindPathToExit(row - 1, col);
            FindPathToExit(row, col + 1);
            FindPathToExit(row + 1, col);

            visited[row, col] = false;
        }
        path.RemoveAt(path.Count - 1);
    }

    static void SavePath()
    {
        StringBuilder currentPath = new StringBuilder();
        for (int i = 1; i < path.Count; i++)
        {
            currentPath.Append(path[i]);
        }
        if (paths.ContainsKey(currentPath.ToString()) == false)
        {
            paths.Add(currentPath.ToString(), currentPath.ToString());
        }           
    }

}
