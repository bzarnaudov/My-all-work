package pacman;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Event;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;


import java.awt.event.KeyEvent;

import javax.swing.JPanel;

public class Game extends JPanel implements ActionListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = -5566108725243282994L;

	private final int BLOCK_SIZE = 24;

	private String levelFileName;
	private Level level;
	private MapSpot[][] levelContent;

	private int screenSizeWidth;
	private int screenSizeHeight;
	private int numberOfGhosts;

	private PacDot pacDot;
	private PowerDot powerDot;
	private Pacman pacman;
	private Score score;
	private Ghost[] ghost;

	private boolean ingame = true;
	private boolean dying = false;
	private static boolean killerPacman = false;

	public Game() {

		initVariables();

		addKeyListener(new TAdapter());

		setFocusable(true);
		setBackground(Color.black);
		setDoubleBuffered(true); // ???
	}

	private void initVariables() {
		levelFileName = "level0.csv";
		level = new Level(levelFileName);
		levelContent = level.getLevelContent();
		screenSizeWidth = BLOCK_SIZE * levelContent[0].length;
		screenSizeHeight = BLOCK_SIZE * levelContent.length;
		pacDot = new PacDot();
		powerDot = new PowerDot();
		pacman = new Pacman();
		score = new Score();
		numberOfGhosts = 4;

		// screendata = new short[nrofblocks * nrofblocks];
		// mazecolor = new Color(150, 100, 5);
		// d = new Dimension(400, 400);
		// ghostx = new int[nrofghosts];
		// ghostdx = new int[nrofghosts];
		// ghosty = new int[nrofghosts];
		// ghostdy = new int[nrofghosts];
		// ghostspeed = new int[nrofghosts];
		// dx = new int[4];
		// dy = new int[4];
		//
		// timer = new Timer(40, this);
		// timer.start();
	}

	class TAdapter extends KeyAdapter {

		@Override
		public void keyPressed(KeyEvent e) {

			int key = e.getKeyCode();

			if (ingame) {
				if (key == KeyEvent.VK_LEFT) {
					pacman.setRequestDirectionX(-1);
					pacman.setRequestDirectionY(0);
				} else if (key == KeyEvent.VK_RIGHT) {
					pacman.setRequestDirectionX(1);
					pacman.setRequestDirectionY(0);
				} else if (key == KeyEvent.VK_UP) {
					pacman.setRequestDirectionX(0);
					pacman.setRequestDirectionY(-1);
				} else if (key == KeyEvent.VK_DOWN) {
					pacman.setRequestDirectionX(0);
					pacman.setRequestDirectionY(1);
				}
			}
		}

		@Override
		public void keyReleased(KeyEvent e) {

			int key = e.getKeyCode();

			if (key == Event.LEFT || key == Event.RIGHT || key == Event.UP
					|| key == Event.DOWN) {
				pacman.setRequestDirectionX(0);
				pacman.setRequestDirectionY(0);
			}
		}
	}

	public int getScreenSizeWidth() {
		return screenSizeWidth;
	}

	public int getScreenSizeHeight() {
		return screenSizeHeight;
	}

	@Override
	public void actionPerformed(ActionEvent e) {

		repaint();
	}

	//
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);

		doDrawing(g);
	}

	//
	private void doDrawing(Graphics g) {

		Graphics2D g2d = (Graphics2D) g;

		g2d.setColor(Color.black);

		drawMaze(g2d);
		drawScore(g2d);
		drawTimeForKill(g2d);
		pacman.doAnim();
		playGame(g2d);

		Toolkit.getDefaultToolkit().sync();
		g2d.dispose();
	}

	private void drawMaze(Graphics2D g2d) {

		int row = 0, column = 0;

		for (int y = 0; y < screenSizeHeight; y += BLOCK_SIZE) {
			for (int x = 0; x < screenSizeWidth; x += BLOCK_SIZE) {
				g2d.setColor(level.getColor());
				g2d.setStroke(new BasicStroke(2));

				if (levelContent[row][column].hasLeftWall() == true) {
					g2d.drawLine(x, y, x, y + BLOCK_SIZE - 1);
				}

				if (levelContent[row][column].hasTopWall() == true) {
					g2d.drawLine(x, y, x + BLOCK_SIZE - 1, y);
				}

				if (levelContent[row][column].hasRightWall() == true) {
					g2d.drawLine(x + BLOCK_SIZE - 1, y, x + BLOCK_SIZE - 1, y
							+ BLOCK_SIZE - 1);
				}

				if (levelContent[row][column].hasBottomWall() == true) {
					g2d.drawLine(x, y + BLOCK_SIZE - 1, x + BLOCK_SIZE - 1, y
							+ BLOCK_SIZE - 1);
				}

				if (levelContent[row][column].hasDot() == true) {
					g2d.setColor(pacDot.getColor());
					g2d.fillRect(x + 11, y + 11, pacDot.getSize(),
							pacDot.getSize());
				}

				if (levelContent[row][column].hasPowerDot() == true) {
					g2d.setColor(powerDot.getColor());
					g2d.fillRect(x + 6, y + 6, powerDot.getSize(),
							powerDot.getSize());
				}
				column++;
			}
			column = 0;
			row++;
		}
	}

	private void drawScore(Graphics2D g) {
		String s;
		g.setFont(score.getFont());
		g.setColor(score.getColor());
		s = "Score: " + score.getScore();
		g.drawString(s, screenSizeHeight / 2 + 96, screenSizeWidth + 16);
	}

	private void drawTimeForKill(Graphics2D g) {
		String s;
		TimeForKill time = new TimeForKill();
		g.setFont(time.getFont());
		g.setColor(time.getColor());
		s = "Remaining time for kill: " + time.getRemainingTimeForKill();
		g.drawString(s, screenSizeWidth / 15, screenSizeHeight + 16);
	}

	private void playGame(Graphics2D g2d) {
		if (dying) {

			death();

		} else {

			pacman.movePacman(BLOCK_SIZE, levelContent, score);
			// drawPacman(g2d);
			// moveGhosts(g2d);
			// checkMaze();
		}
	}

	private void death() {
		score.setScore(0);
		initLevel();
	}

	private void initLevel() {

		// int i;
		// for (i = 0; i < nrofblocks * nrofblocks; i++) {
		// screendata[i] = leveldata[i];
		// }
		level = new Level(levelFileName);
		levelContent = level.getLevelContent();

		continueLevel();
	}

	private void continueLevel() {

		ghost = new Ghost[numberOfGhosts];
		int directionY = -1;
		int random;

		for (int i = 0; i < numberOfGhosts; i++) {
			ghost[i] = new Ghost(7 * BLOCK_SIZE, 9 * BLOCK_SIZE); // ghost starting point
			ghost[i].setDirectionX(0);
			ghost[i].setDirectionY(directionY);
			directionY = -directionY;
			
			// random for speed of ghost
			random = (int) (Math.random() * (ghost[i].getSpeed() + 1));

			if (random > ghost[i].getSpeed()) {
				random = ghost[i].getSpeed();
			}

			ghost[i].setSpeed(Ghost.validSpeeds[random]);
		}
		
		// pacman starting point
		pacman.setRowPosition(14 * BLOCK_SIZE); 
		pacman.setColumnPosition(7 * BLOCK_SIZE);
		pacman.setDirectionX(0);
		pacman.setDirectionY(0);
		pacman.setRequestDirectionX(0);
		pacman.setRequestDirectionY(0);
		pacman.setDrawDirectionX(-1);
		pacman.setDrawDirectionY(0);
		dying = false;
	}

	public static boolean isKillerPacman() {
		return killerPacman;
	}

	public static void setKillerPacman(boolean killerPacman) {
		Game.killerPacman = killerPacman;
	}

	//
	//
	// @Override
	// public void addNotify() {
	// super.addNotify();
	//
	// initGame();
	// }
	//
	// private void initGame() {
	//
	// score = 0;
	// initLevel();
	// }
	//

	//

	//

	//

	//

}
