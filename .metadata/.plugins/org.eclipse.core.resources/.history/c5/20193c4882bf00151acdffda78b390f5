package exercises;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;

import javax.swing.JOptionPane;

public class Exercise18ParallelEightQueens {
	public static ArrayList<String> list = new ArrayList<String>();

	public static void main(String[] args) {
		long startTime = System.currentTimeMillis();
		parallelAllEightQueens();
		long endTime = System.currentTimeMillis();
		System.out.println("\nParallel time with "
				+ Runtime.getRuntime().availableProcessors()
				+ " processors is " + (endTime - startTime) + " milliseconds");
	}

	private static void parallelAllEightQueens() {
		ExecutorService executor = Executors.newFixedThreadPool(8);
		for (int i = 0; i < 8; i++) {
			executor.execute(new RunOnSeparateThread());
		}
		executor.shutdown();
	}
	
	private class RunOnSeparateThread implements Runnable {
		public void run() {
			if (!search()) // Search for a solution
				System.out.println("No solution found");		
		}
	}
	
	
	
}
