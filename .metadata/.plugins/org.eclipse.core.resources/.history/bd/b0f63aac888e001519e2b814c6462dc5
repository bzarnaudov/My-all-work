package all;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class Problem7ValidationOfExpression {
	public static void main(String[] args) {
		try {
			String expression = readExpression();
			// first parse the expression to tokens
			String[] tokens = expressionToTokens(expression);
			// process the string for negative numbers
			tokens = processForNegativeNumbers(tokens);
			// second, transform it into reverse Polish notation
			String[] reversePolishNotation = shuntingYardAlgorithm(tokens);
			// finally, calculate it
			double result = calculateReversePolishNotation(reversePolishNotation);
			System.out.printf(expression + " = %.2f", result);
		} catch (ArithmeticException ex) {
			System.out.println("Division by zero.");
		} catch (NumberFormatException ex) {
			System.out.println("Invalid expression!");
		}
	}

	private static String[] shuntingYardAlgorithm(String[] tokens) {
		/*
		 * Modified psedo-code from wikipedia
		 * 
		 * While there are tokens to be read: Read a token. If the token is a
		 * number, then add it to the output queue. If the token is an operator,
		 * o1, then: while there is an operator token, o2, at the top of the
		 * stack, and o1's precedence is less than or equal to that of o2, pop
		 * o2 off the stack, onto the output queue; push o1 onto the stack. If
		 * the token is a left parenthesis, then push it onto the stack. If the
		 * token is a right parenthesis: Until the token at the top of the stack
		 * is a left parenthesis, pop operators off the stack onto the output
		 * queue. Pop the left parenthesis from the stack, but not onto the
		 * output queue. When there are no more tokens to read: While there are
		 * still operator tokens in the stack: Pop the operator onto the output
		 * queue. Exit.
		 */
		final int NUMBER = 1;
		final int OPERATOR = 2;
		
		Queue<String> output = new LinkedList<String>();
		Stack<String> operatorStack = new Stack<String>();
		Queue<String> queueTokens = new LinkedList<String>();
		queueTokens.addAll(Arrays.asList(tokens));

		while (queueTokens.size() > 0) {
			String token = queueTokens.poll();
			if (isTokenNumber(token)) {
				output.add(token);
			} else if (isTokenOperator(token)) {
				while (operatorStack.size() > 0
						&& isTokenOperator(operatorStack.peek())
						&& getOperatorPrecedence(token) <= getOperatorPrecedence(operatorStack
								.peek())) {
					output.add(operatorStack.pop());
				}
				operatorStack.push(token);
			} else if (token.equals("(")) {
				operatorStack.push(token);
			} else if (token.equals(")")) {
				String poppedOperator = operatorStack.pop();
				while (!poppedOperator.equals("(")) {
					output.add(poppedOperator);
					poppedOperator = operatorStack.pop();
				}
			}
		}

		while (operatorStack.size() > 0) {
			output.add(operatorStack.pop());
		}

		return output.toArray(new String[output.size()]);
	}

}
