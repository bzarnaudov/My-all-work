package all;

import java.nio.file.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class BfsForAllDirectoriesOnHardDisk {

	public static void main(String[] args) {
		String hardDiskLetter;
		Scanner input = new Scanner(System.in);
		System.out.print("Please enter letter of hard disk , which you want to see : ");
		while (true) {
			hardDiskLetter = input.nextLine();
			if ((hardDiskLetter.length() > 2) && !hardDiskLetter.matches("[A-Z]+")) {
				System.out.println("Please write only one letter from A to Z : ");
			} else {
				break;
			}
		}
		
		Path path = Paths.get(hardDiskLetter + ":\\");

		Queue<String> queue = new LinkedList<String>();
		queue.add(hardDiskLetter);
		
		while (queue.size() > 0) {
			Item currentItem = queue.poll();
			if (currentItem.value < m) {
				queue.add(new Item(currentItem.value * 2, currentItem));
				queue.add(new Item(currentItem.value + 2, currentItem));
				queue.add(new Item(currentItem.value + 1, currentItem));
			}
			if (currentItem.value == m) {
				printSequenceNtoM(currentItem);
				break;
			}
			if (queue.size() == 0) {
				System.out.println("No solution.");
			}
		}
		input.close();
	}

	private static void printSequenceNtoM(Item currentItem) {
		Stack<Integer> stack = new Stack<Integer>();
		while (currentItem != null) {
			stack.push(currentItem.value);
			currentItem = currentItem.previousItem;
		}
		
		while (stack.size() > 0) {
			System.out.print(stack.pop());
			if (!stack.isEmpty()) {
				System.out.print(" -> ");
			}
		}
	}

}
