package all;

import java.util.*;

public class Problem7ValidationOfExpression {
	public static void main(String[] args) {
		try {
			String expression = readExpression();
			// first parse the expression to tokens
			String[] tokens = expressionToTokens(expression);
			// process the string for negative numbers
			tokens = processForNegativeNumbers(tokens);
			// second, transform it into reverse Polish notation
			String[] reversePolishNotation = shuntingYardAlgorithm(tokens);
			// finally, calculate it
			double result = calculateReversePolishNotation(reversePolishNotation);
			System.out.printf(expression + " = %.2f", result);
		} catch (ArithmeticException ex) {
			System.out.println("Division by zero.");
		} catch (NumberFormatException ex) {
			System.out.println("Invalid expression!");
		}
	}

	private static String[] shuntingYardAlgorithm(String[] tokens) {
		/*
		 * Modified psedo-code from wikipedia
		 * 
		 * While there are tokens to be read: Read a token. If the token is a
		 * number, then add it to the output queue. If the token is an operator,
		 * o1, then: while there is an operator token, o2, at the top of the
		 * stack, and o1's precedence is less than or equal to that of o2, pop
		 * o2 off the stack, onto the output queue; push o1 onto the stack. If
		 * the token is a left parenthesis, then push it onto the stack. If the
		 * token is a right parenthesis: Until the token at the top of the stack
		 * is a left parenthesis, pop operators off the stack onto the output
		 * queue. Pop the left parenthesis from the stack, but not onto the
		 * output queue. When there are no more tokens to read: While there are
		 * still operator tokens in the stack: Pop the operator onto the output
		 * queue. Exit.
		 */
		final int NUMBER = 1;
		final int OPERATOR = 2;

		int currentlyExpecting = NUMBER;

		Queue<String> output = new LinkedList<String>();
		Stack<String> operatorStack = new Stack<String>();
		Queue<String> queueTokens = new LinkedList<String>();
		queueTokens.addAll(Arrays.asList(tokens));

		while (queueTokens.size() > 0) {
			String token = queueTokens.poll();
			if (isTokenNumber(token)) {
				if (currentlyExpecting == OPERATOR) {
					throw new ValidationErrorException();
				}
				currentlyExpecting = OPERATOR;
				output.add(token);
			} else if (isTokenOperator(token)) {
				if (currentlyExpecting == OPERATOR) {
					throw new ValidationErrorException();
				}
				while (operatorStack.size() > 0
						&& isTokenOperator(operatorStack.peek())
						&& getOperatorPrecedence(token) <= getOperatorPrecedence(operatorStack
								.peek())) {
					output.add(operatorStack.pop());
				}
				operatorStack.push(token);
			} else if (token.equals("(")) {
				operatorStack.push(token);
			} else if (token.equals(")")) {
				if (operatorStack.size() == 0) {
					throw new ValidationErrorException();
				}

				String poppedOperator = operatorStack.pop();
				while (!poppedOperator.equals("(")) {
					// Add check for parenthesis
					if (operatorStack.size() == 0) {
						throw new ValidationErrorException();
					}

					output.add(poppedOperator);
					poppedOperator = operatorStack.pop();
				}
			} else {
				throw new ValidationErrorException();
			}
		}

		while (operatorStack.size() > 0) {
            String processingOperator = operatorStack.pop();
            if (processingOperator.equals("(")) {
                throw new ValidationErrorException();
            }

			output.add(operatorStack.pop());
		}

		return output.toArray(new String[output.size()]);
	}

    private static String[] processForNegativeNumbers(String[] tokens) {
        List<String> result = new ArrayList<String>();

        for (int i = 0; i < tokens.length; i++) {
            //if we have a minus, we have to process it
            if (tokens[i].equals("-")) {
                //manage expression starting with minus
                if (i == 0) {
                    //multiplying by negative one has the same effect as starting the exp with a minus
                    result.Add("-1");
                    result.Add("*");
                }
                //minus in front of a number
                else if
                    (
                    i != (tokens.Length - 1) && //it is not the last character
                    IsTokenNumber(tokens[i + 1]) && // and it is followed by a number
                    (IsTokenOperator(tokens[i - 1]) || tokens[i - 1] == "(" || tokens[i - 1] == "(") // and it is preceded by operator or parenthesis
                    )
                {
                    //combine the sign with the number
                    result.Add(tokens[i] + tokens[i + 1]);
                    //advance the counter
                    i++;
                }
                else
                {
                    //if none of them is satisfied, just add it to the result
                    result.Add(tokens[i]);
                }
            }
            else
            {
                result.Add(tokens[i]);
            }

        }
        return result.ToArray();
    }

}
