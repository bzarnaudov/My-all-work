package exercises;

import java.util.concurrent.*;

public class Exercise13GenericParallelMergeSort<E extends Comparable<E>> {
	public static void main(String[] args) {
		Exercise13GenericParallelMergeSort<Integer> test1 = new Exercise13GenericParallelMergeSort<Comparable<Integer>>();
		final int SIZE = 7000000;
		int[] list1 = new int[SIZE];
		int[] list2 = new int[SIZE];
		
		for (int i = 0; i < list1.length; i++) {
			list1[i] = list2[i] = (int)(Math.random() * 10000000);
		}
		
		long startTime = System.currentTimeMillis();
		parallelMergeSort(list1);
		long endTime = System.currentTimeMillis();
		System.out.println("\nParallel time with " + Runtime.getRuntime().availableProcessors() +
				" processors is " + (endTime - startTime) + " milliseconds");
		
		startTime = System.currentTimeMillis();
		all.MergeSort.mergeSort(list2);
		endTime = System.currentTimeMillis();
		System.out.println("\nSequential time is " + (endTime - startTime) + " milliseconds");
	}

	public static void parallelMergeSort(E[] list) {
		RecursiveAction mainTask = new SortTask(list);
		ForkJoinPool pool = new ForkJoinPool();
		pool.invoke(mainTask);
	}
	
	@SuppressWarnings("serial")
	private static class SortTask<E> extends RecursiveAction {
		private final int THRESHOLD = 500;
		private E[] list;
		
		SortTask(E[] list) {
			this.list = list;
		}

		@Override
		protected void compute() {
			if (list.length < THRESHOLD) {
				java.util.Arrays.sort(list);
			} else {
				// Obtain the first half
				E[] firstHalf = new E[list.length / 2];
				System.arraycopy(list, 0, firstHalf, 0, list.length / 2);
				
				// Obtain the second half
				int secondHalfLength = list.length - list.length / 2;
				E[] secondHalf  = new E[secondHalfLength];
				System.arraycopy(list, list.length / 2, secondHalf, 0, secondHalfLength);
				
				// Recursively sort the two halves
				invokeAll(new SortTask(firstHalf), new SortTask(secondHalf));
				
				// Merge firstHalf with secondHalf into list
				all.MergeSort.merge(firstHalf, secondHalf, list);
			}
		}
	}
}
