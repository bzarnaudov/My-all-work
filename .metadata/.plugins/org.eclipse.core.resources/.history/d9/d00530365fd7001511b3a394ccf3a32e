package pacman;

import java.awt.Graphics2D;
import java.awt.image.ImageObserver;

/**
 * The Ghost Class
 */
public class Ghost extends Unit {
	private static final long serialVersionUID = 8727763673665791512L;

	private Boolean isEatable;

	// pointer for four diagonals ghost behavior
	private int counterForDiagonalX = 0;
	private int counterForDiagonalY = 0;
	private int endPositionForBfsX;
	private int endPositionForBfsY;

	public static final int validSpeeds[] = { 1, 2, 3, 4, 6, 8 };

	public Ghost(int startRowPosition, int startColumnPosition) {
		rowPosition = startRowPosition;
		columnPosition = startColumnPosition;
		speed = 3;
	}

	/**
	 * Function â€“ change Ghost state
	 */
	public void changeState() {
		// Code that changes the Ghost's state
		// This function also will call the three functions of changeDirection,
		// changeSpeed, and changeColor
	}

	public void moveGhosts(Graphics2D g2d, boolean killerPacman, Pacman pacman,
			int blockSize, Level level, int i) {

		int positionX;
		int positionY;
		MapSpot pointOfMap;
		MapSpot[][] levelContent = level.getLevelContent();

		if (killerPacman == false) {
			endPositionForBfsX = pacman.getRowPosition() / blockSize;
			endPositionForBfsY = pacman.getColumnPosition() / blockSize;
		} else {
			endPositionForBfsX = level.getColumnStartingPositionGhost();
			endPositionForBfsY = level.getRowStartingPositionGhost();
		}

		if (columnPosition % blockSize == 0 && rowPosition % blockSize == 0) {
			positionX = columnPosition / blockSize;
			positionY = rowPosition / blockSize;
			pointOfMap = levelContent[positionY][positionX];

			// // the shortest path
			// if (i == 0) {
			// levelForBfs(endPositionForBfsY, endPositionForBfsX);
			// ghostBfsMove(i);
			//
			// }
			//
			// // 50% the shortest path and 50% random
			// if (i == 1) {
			// if (Math.random() > 0.5) {
			// levelForBfs(endPositionForBfsY, endPositionForBfsX);
			// ghostBfsMove(i);
			// } else {
			// randomMoveGhost(posGhost, i);
			// }
			// }
			// // path between four edges
			// if (i == 2) {
			// if (killerPacman == false) {
			// levelForBfs(counterForDiagonalY, counterForDiagonalX);
			// ghostBfsMove(i);
			// if (ghost[i].columnPosition / blockSize == 0
			// && ghost[i].rowPosition / blockSize == 0) {
			// counterForDiagonalX = 14;
			// counterForDiagonalY = 14;
			// }
			// if (ghost[i].columnPosition / blockSize == 14
			// && ghost[i].rowPosition / blockSize == 14) {
			// counterForDiagonalX = 0;
			// counterForDiagonalY = 14;
			// }
			// if (ghost[i].columnPosition / blockSize == 0
			// && ghost[i].rowPosition / blockSize == 14) {
			// counterForDiagonalX = 14;
			// counterForDiagonalY = 0;
			// }
			// if (ghost[i].columnPosition / blockSize == 14
			// && ghost[i].rowPosition / blockSize == 0) {
			// counterForDiagonalX = 0;
			// counterForDiagonalY = 0;
			// }
			// } else {
			// levelForBfs(endPositionForBfsY, endPositionForBfsX);
			// ghostBfsMove(i);
			// }
			// }

			// random wandering
			if (i > 2) {
				if (killerPacman == false) {
					randomMoveGhost(pointOfMap);
				} else {
					// levelForBfs(endPositionForBfsY, endPositionForBfsX);
					// ghostBfsMove(i);
				}
			}

			// the new position of ghost
			columnPosition = columnPosition + (directionX * speed);
			rowPosition = rowPosition + (directionY * speed);
			drawGhost(g2d, columnPosition + 1, rowPosition + 1);

			// meeting between pacman and ghost
			if (pacman.columnPosition > (columnPosition - 12)
					&& pacman.columnPosition < (columnPosition + 12)
					&& pacman.rowPosition > (rowPosition - 12)
					&& pacman.rowPosition < (rowPosition + 12)) {
				if (killerPacman == false) {
					pacman.setAlive(false);
				} else {
					columnPosition = level.getColumnStartingPositionGhost()
							* blockSize;
					rowPosition = level.getRowStartingPositionGhost()
							* blockSize;
				}
			}
		}
	}

	//
	// // first step to the end
	// private void ghostBfsMove(int i) {
	// Node node = bfs(maze, ghost[i].columnPosition / blockSize,
	// ghost[i].rowPosition / blockSize, 0);
	// while (node != null) {
	// if (node.l == 1) {
	// ghost[i].directionX = node.x - (ghost[i].columnPosition / blockSize);
	// ghost[i].directionY = node.y - (ghost[i].rowPosition / blockSize);
	// }
	// node = node.parent;
	// }
	// }
	//
	// private void levelForBfs(int endy, int endx) {
	// int c = 0;
	// for (int x = 0; x < 15; x++) {
	// for (int y = 0; y < 15; y++) {
	// maze[x][y] = leveldata[c];
	// c += 1;
	// }
	// }
	// maze[endy][endx] = 64; // the end of maze
	// }
	//
	private void randomMoveGhost(MapSpot pointOfMap) {
		int count = 0;
		int[] directionArrayX = new int[4];
		int[] directionArrayY = new int[4];

		// algorithm for success escape of tunnels
		if (!pointOfMap.hasLeftWall() && directionX != 1) {
			directionArrayX[count] = -1;
			directionArrayY[count] = 0;
			count++;
		}

		if (!pointOfMap.hasTopWall() && directionY != 1) {
			directionArrayX[count] = 0;
			directionArrayY[count] = -1;
			count++;
		}

		if (!pointOfMap.hasRightWall() && directionX != -1) {
			directionArrayX[count] = 1;
			directionArrayY[count] = 0;
			count++;
		}

		if (!pointOfMap.hasBottomWall() && directionY != -1) {
			directionArrayX[count] = 0;
			directionArrayY[count] = 1;
			count++;
		}

		// random
		if (count == 0) {

			if (pointOfMap.hasBottomWall() && pointOfMap.hasLeftWall()
					&& pointOfMap.hasRightWall() && pointOfMap.hasTopWall()) {
				directionX = 0;
				directionY = 0;
			} else {
				directionX = -directionX;
				directionY = -directionY;
			}

		} else {
			count = (int) (Math.random() * count);
			if (count > 3) {
				count = 3;
			}
			directionX = directionArrayX[count];
			directionY = directionArrayY[count];
		}
	}

	private void drawGhost(Graphics2D g2d, int x, int y) {
		g2d.drawImage(unit1, x, y, (ImageObserver) this);
	}

	//
	// public static class Node {
	// int y;
	// int x;
	// int l;
	// Node parent;
	//
	// private Node(int y, int x, int l, Node parent) {
	// this.y = y;
	// this.x = x;
	// this.l = l;
	// this.parent = parent;
	// }
	//
	// @Override
	// public String toString() {
	// return "" + y + " " + x + " " + l;
	// }
	// }
	//
	// public static Node bfs(int[][] maze, int startX, int startY, int wall) {
	// Queue<Node> queue = new LinkedList<>();
	// Node start = new Node(startY, startX, 0, null);
	// queue.add(start);
	//
	// while (queue.peek() != null) {
	// Node current = queue.remove();
	// int y = current.y;
	// int x = current.x;
	// int l = current.l;
	//
	// if (y - 1 > -1 && maze[y - 1][x] != wall) {
	// Node next = new Node(y - 1, x, l + 1, current);
	// if (maze[y - 1][x] == 64) {
	// return next;
	// } else {
	// maze[y - 1][x] = wall;
	// queue.add(next);
	// }
	// }
	//
	// if (x - 1 > -1 && maze[y][x - 1] != wall) {
	// Node next = new Node(y, x - 1, l + 1, current);
	// if (maze[y][x - 1] == 64) {
	// return next;
	// } else {
	// maze[y][x - 1] = wall;
	// queue.add(next);
	// }
	// }
	//
	// if (x + 1 < 15 && maze[y][x + 1] != wall) {
	// Node next = new Node(y, x + 1, l + 1, current);
	// if (maze[y][x + 1] == 64) {
	// return next;
	// } else {
	// maze[y][x + 1] = wall;
	// queue.add(next);
	// }
	// }
	//
	// if (y + 1 < 15 && maze[y + 1][x] != wall) {
	// Node next = new Node(y + 1, x, l + 1, current);
	// if (maze[y + 1][x] == 64) {
	// return next;
	// } else {
	// maze[y + 1][x] = wall;
	// queue.add(next);
	// }
	// }
	// }
	// return null;
	// }
}