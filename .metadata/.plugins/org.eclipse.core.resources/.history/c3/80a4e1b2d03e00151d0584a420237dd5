package treeAndGraphTraversal;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Stack;

public class Problem2RoundDance {
	
	static Map<Integer, Node<Integer>> map = new HashMap<>();
	
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.print("Please write number of edges in the graph: ");
		int edgesCount = Integer.parseInt(input.nextLine());
		System.out.print("Please write first Node from whom to start: ");
		int startNode = Integer.parseInt(input.nextLine());
		Node<Integer> node = new Node<Integer>(startNode);
		map.put(startNode, node);
		for (int i = 0; i <= edgesCount; i++) {
			System.out.println("Write edge between nodes with space between them(edge " + i + ") : " );
			String[] edge = input.nextLine().split(" ");
			int firstValue = Integer.parseInt(edge[0]);
			Node<Integer> firstNode = getTreeNodeByValue(firstValue);
			int secondValue = Integer.parseInt(edge[1]);
			Node<Integer> secondNode = getTreeNodeByValue(secondValue);
			firstNode.childNodes.add(secondNode);
			secondNode.childNodes.add(firstNode);
		}
		//DepthFirstSearch
		theLongestRoundDance(startNode);
		input.close();
	}
	
	private static void theLongestRoundDance(int startNode) {
		Node<Integer> node = getTreeNodeByValue(startNode);
		Stack<Node<Integer>> stack = new Stack<Node<Integer>>();
		stack.push(node);
		while (!stack.isEmpty()) {
			node = stack.pop();
			for (int i = 0; i < node.childNodes.size(); i++) {
				stack.push(node.childNodes.get(i));
			}
			
		}
		
	}

	//dictionary to map nodes by their value
	private static Node<Integer> getTreeNodeByValue(
			int value) {
		if (!map.containsKey(value)) {
			map.put(value, new Node<Integer>(value));
		}
		return map.get(value);
	}
	
}
