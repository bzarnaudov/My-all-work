package all;

import all.BinaryTree.BinaryTreeNode;

public class Problem5PrintsAllVerticesOfABinaryTreeWithLeavesSuccessors {

	public static void main(String[] args) {
		BinaryTree<Integer> binaryTree =
				new BinaryTree<Integer>(14,
						new BinaryTree<Integer>(19,
								new BinaryTree<Integer> (23),
								new BinaryTree<Integer> (6,
										new BinaryTree<Integer>(10),
										new BinaryTree<Integer>(21))),
						new BinaryTree<Integer>(15,
								new BinaryTree<Integer>(3),
								null));
		
		findingNodes(binaryTree.getRoot());
	}

	private static void findingNodes(BinaryTreeNode<Integer> root) {
		if (root == null) {
			return;
		}
		// 1. Visit the root of this subtree.
		if (root.getLeftChild().getLeftChild() == null &&
				root.getLeftChild().getRightChild() == null &&
				root.getRightChild().getLeftChild() == null &&
				root.getRightChild().getRightChild() == null) {
			
		}
		sumOfLevel.set(depth, sumOfLevel.get(depth) + root.getValue());

		// 2. Visit the left child.
		setDepthOfNodes(root.getLeftChild(), depth + 1);
		// 3. Visit the right child.
		setDepthOfNodes(root.getRightChild(), depth + 1);
	}

}
