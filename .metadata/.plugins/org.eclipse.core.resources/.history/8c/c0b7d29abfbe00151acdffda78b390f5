package exercises;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

@SuppressWarnings("serial")
public class Exercise21EightQueensAnimation extends JApplet {
	public static final int SIZE = 8; // The size of the chess board
	// queens are placed at (i, queens[i])
	// -1 indicates that no queen is currently placed in the ith row
	// Initially, place a queen at (0, 0) in the 0th row
	private int[] queens = { -1, -1, -1, -1, -1, -1, -1, -1 };
	private ChessBoard chessBoard = new ChessBoard();

	public Exercise21EightQueensAnimation() {
		add(chessBoard, BorderLayout.CENTER);
		add(new JLabel("Click the mouse to see the next move", JLabel.CENTER),
				BorderLayout.SOUTH);

		this.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				paused = false;
			}
		});
		Thread thread = new Thread(new RunOnSeparateThread());
		thread.start();
	}

	class RunOnSeparateThread implements Runnable {
		public void run() {
			if (!search()) // Search for a solution
				JOptionPane.showMessageDialog(null, "No solution found");
		}
	}

	boolean paused = true;
	int k = 0;

	/** Search for a solution */
	private boolean search() {
		// k - 1 indicates the number of queens placed so far
		// We are looking for a position in the kth row to place a queen
		while (k >= 0 && k <= 7) {
			chessBoard.repaint();
			while (paused) {
				try {
					Thread.sleep(5);
				} catch (Exception ex) {
				}
			}

			paused = true;

			// Find a position to place a queen in the kth row
			int j = findPosition(k);
			if (j < 0) {
				queens[k] = -1;
				k--; // back track to the previous row
			} else {
				queens[k] = j;
				k++;
			}

		}

		if (k == -1)
			return false; // No solution
		else
			return true; // A solution is found
	}

	public int findPosition(int k) {
		int start = queens[k] + 1; // Search for a new placement

		for (int j = start; j < 8; j++) {
			if (isValid(k, j))
				return j; // (k, j) is the place to put the queen now
		}

		return -1;
	}

	/** Return true if a queen can be placed at (row, column) */
	public boolean isValid(int row, int column) {
		for (int i = 1; i <= row; i++)
			if (queens[row - i] == column // Check column
					|| queens[row - i] == column - i // Check upleft diagonal
					|| queens[row - i] == column + i) // Check upright diagonal
				return false; // There is a conflict
		return true; // No conflict
	}

	class ChessBoard extends JPanel {
		private java.net.URL url = getClass().getResource("image/queen1.jpg");
		private Image queenImage = new ImageIcon(url).getImage();

		ChessBoard() {
			setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
		}

		@Override
		protected void paintComponent(Graphics g) {
			super.paintComponent(g);

			// Highlight the current row
			g.setColor(Color.YELLOW);
			g.fillRect(0, k * getHeight() / SIZE, getWidth(), getHeight()
					/ SIZE);
			g.setColor(Color.BLACK);

			// Paint the queens
			for (int i = 0; i < SIZE; i++) {
				int j = queens[i]; // The position of the queen in row i
				g.drawImage(queenImage, j * getWidth() / SIZE, i * getHeight()
						/ SIZE, getWidth() / SIZE, getHeight() / SIZE, this);
			}

			// Draw the horizontal and vertical lines
			for (int i = 1; i < SIZE; i++) {
				g.drawLine(0, i * getHeight() / SIZE, getWidth(), i
						* getHeight() / SIZE);
				g.drawLine(i * getWidth() / SIZE, 0, i * getWidth() / SIZE,
						getHeight());
			}
		}
	}

	public static void main(String[] args) {
		JFrame frame = new JFrame("Eight Queens Animation");
		Exercise21EightQueensAnimation applet = new Exercise21EightQueensAnimation();
		frame.add(applet, BorderLayout.CENTER);
		applet.init();
		applet.start();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(400, 400);
		frame.setLocationRelativeTo(null); // Center the frame
		frame.setVisible(true);
	}
}
