package all;

public class DynamicList {
	
	private class Node{
		Object element;
		Node next;
		
		Node(Object element, Node prevNode) {
			this.element = element;
			prevNode.next = this;
		}
		Node(Object element) {
			this.element = element;
			next = null;
		}
	}

	private Node head;
	private Node tail;
	private int count;
	
	public DynamicList() {
		this.head = null;
		this.tail = null;
		this.count = 0;
	}
	
	/**
	* Add element at the end of the list
	* @param item - the element you want to add
	*/
	
	public void add(Object item) {
		if (head == null) {
			// We have empty list
			head = new Node(item);
			tail = head;
		} else {
			// We have non-empty list
			Node newNode = new Node(item, tail);
			tail = newNode;
		}
		count++;
	}
	
	/**
	* Removes and returns element on the specific index
	* @param index - the index of the element you want to remove
	* @return the removed element
	* @exception IndexOutOfBoundsException - when index is invalid
	*/
	public Object remove(int index) {
		if (index>=count || index<0) {
			throw new IndexOutOfBoundsException(
					"Invalid index: " + index);
		}
	
		// Find the element at the specified index
		int currentIndex = 0;
		Node currentNode = head;
		Node prevNode = null;
		while (currentIndex < index) {
			prevNode = currentNode;
			currentNode = currentNode.next;
			currentIndex++;
		}
	
		// Remove the element
		count--;
		if (count==0) {
			head = null;
			tail = null;
		} else if (prevNode == null) {
			head = currentNode.next;
		} else {
			prevNode.next = currentNode.next;
		}
		return currentNode.element;
	}
	
	
}
