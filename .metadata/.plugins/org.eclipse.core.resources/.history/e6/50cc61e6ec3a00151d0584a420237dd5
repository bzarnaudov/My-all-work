package treeAndGraphTraversal;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import treesAndTreeLikeStructures.Tree;

public class Problem1FindTheRoot {
	
	static Map<Integer, Tree<Integer>> nodeByValue = new HashMap<>();
	
	public static void main(String[] args) {
		readFromConsole();
		findRootNode();
	}
	
	private static void readFromConsole() {
		Scanner input = new Scanner(System.in);
		System.out.print("Please write number of edges in the forest: ");
		int edgesCount = Integer.parseInt(input.nextLine());
		for ( int i = 1; i <= edgesCount; i++) {
			System.out.println("Write parent and child with space between them(edge " + i + ") : " );
			String[] edge = input.nextLine().split(" ");
			int parentValue = Integer.parseInt(edge[0]);
			Tree<Integer> parentNode = getTreeNodeByValue(parentValue);
			int childValue = Integer.parseInt(edge[1]);
			Tree<Integer> childNode = getTreeNodeByValue(childValue);
			parentNode.getChildren().add(childNode);
			childNode.setParent(parentNode);
		}
		input.close();
	}
	
	//dictionary to map nodes by their value
	@SuppressWarnings("unchecked")
	private static Tree<Integer> getTreeNodeByValue(int value) {
		if (!nodeByValue.containsKey(value)) {
			nodeByValue.put(value, new Tree<Integer>(value));
		}
		return nodeByValue.get(value);
	}
	
	public static void findRootNode() {
		Tree<Integer> rootNode = null;
		for (Tree<Integer> node : nodeByValue.values()) {
			if (node.getParent() == null) {
				rootNode = node;
			}
		}
		
		System.out.println("Root node: " + rootNode.getValue());
	}
	
}
