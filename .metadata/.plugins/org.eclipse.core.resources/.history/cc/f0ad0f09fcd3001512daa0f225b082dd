package pacman;

public class Pacman extends Unit {

	private String pacman1S = "pacman.png";
	private String pacman2upS = "up1.png";
	private String pacman3upS = "up2.png";
	private String pacman4upS = "up3.png";
	private String pacman2downS = "down1.png";
	private String pacman3downS = "down2.png";
	private String pacman4downS = "down3.png";
	private String pacman2leftS = "left1.png";
	private String pacman3leftS = "left2.png";
	private String pacman4leftS = "left3.png";
	private String pacman2rightS = "right1.png";
	private String pacman3rightS = "right2.png";
	private String pacman4rightS = "right3.png";
	
	private final int pacAnimationDelay = 2;
	private final int pacmanAnimationCount = 4;
	
	private int pacAnimationCount = pacAnimationDelay;
	private int pacAnimationDir = 1;
	private int pacmanAnimationPos = 0;
	
	private int requestDirectionX;
	private int requestDirectionY;
	private int drawDirectionX;
	private int drawDirectionY;

	public Pacman() {
		super.setImages(pacman1S, pacman2upS, pacman3upS, pacman4upS,
				pacman2downS, pacman3downS, pacman4downS, pacman2leftS,
				pacman3leftS, pacman4leftS, pacman2rightS, pacman3rightS,
				pacman4rightS);
	}

	public int getDrawDirectionX() {
		return drawDirectionX;
	}

	public void setDrawDirectionX(int drawDirectionX) {
		this.drawDirectionX = drawDirectionX;
	}

	public int getDrawDirectionY() {
		return drawDirectionY;
	}

	public void setDrawDirectionY(int drawDirectionY) {
		this.drawDirectionY = drawDirectionY;
	}

	public int getRequestDirectionX() {
		return requestDirectionX;
	}

	public void setRequestDirectionX(int requestDirectionX) {
		this.requestDirectionX = requestDirectionX;
	}

	public int getRequestDirectionY() {
		return requestDirectionY;
	}

	public void setRequestDirectionY(int requestDirectionY) {
		this.requestDirectionY = requestDirectionY;
	}

	public void doAnim() {

		pacAnimationCount--;

		if (pacAnimationCount <= 0) {
			pacAnimationCount = pacAnimationDelay; // make pacman to open his mouth slowly
			pacmanAnimationPos += pacAnimationDir;

			if (pacAnimationDir == (pacmanAnimationCount - 1) || pacmanAnimationPos == 0) {
				pacAnimationDir = -pacAnimationDir;
			}
		}
	}

	public void movePacman() {

		int pos;
		short ch;

		if (requestDirectionX == -pacmandx && reqdy == -pacmandy) {
			pacmandx = reqdx;
			pacmandy = reqdy;
			viewdx = pacmandx;
			viewdy = pacmandy;
		}

		if (pacmanx % blocksize == 0 && pacmany % blocksize == 0) {
			pos = pacmanx / blocksize + nrofblocks
					* (int) (pacmany / blocksize);
			ch = screendata[pos];

			if ((ch & 16) != 0) {
				screendata[pos] = (short) (ch & 15);
				score++;
			}
			if ((ch & 32) != 0) {
				score += 49;
				killerPacman = true;
				if (remainingTimeForKill == 0) {
					timer();
				}
				remainingTimeForKill = timeForKill / 1000;
			}

			if (reqdx != 0 || reqdy != 0) {
				if (!((reqdx == -1 && reqdy == 0 && (ch & 1) != 0)
						|| (reqdx == 1 && reqdy == 0 && (ch & 4) != 0)
						|| (reqdx == 0 && reqdy == -1 && (ch & 2) != 0) || (reqdx == 0
						&& reqdy == 1 && (ch & 8) != 0))) {
					pacmandx = reqdx;
					pacmandy = reqdy;
					viewdx = pacmandx;
					viewdy = pacmandy;
				}
			}

			// Check for standstill
			if ((pacmandx == -1 && pacmandy == 0 && (ch & 1) != 0)
					|| (pacmandx == 1 && pacmandy == 0 && (ch & 4) != 0)
					|| (pacmandx == 0 && pacmandy == -1 && (ch & 2) != 0)
					|| (pacmandx == 0 && pacmandy == 1 && (ch & 8) != 0)) {
				pacmandx = 0;
				pacmandy = 0;
			}
		}
		pacmanx = pacmanx + pacmanspeed * pacmandx;
		pacmany = pacmany + pacmanspeed * pacmandy;
	}
	//
	// private void drawPacman(Graphics2D g2d) {
	//
	// if (viewdx == -1) {
	// drawPacnanLeft(g2d);
	// } else if (viewdx == 1) {
	// drawPacmanRight(g2d);
	// } else if (viewdy == -1) {
	// drawPacmanUp(g2d);
	// } else {
	// drawPacmanDown(g2d);
	// }
	// }
	//
	// private void drawPacmanUp(Graphics2D g2d) {
	//
	// switch (pacmananimpos) {
	// case 1:
	// g2d.drawImage(pacman2up, pacmanx + 1, pacmany + 1, this);
	// break;
	// case 2:
	// g2d.drawImage(pacman3up, pacmanx + 1, pacmany + 1, this);
	// break;
	// case 3:
	// g2d.drawImage(pacman4up, pacmanx + 1, pacmany + 1, this);
	// break;
	// default:
	// g2d.drawImage(pacman1, pacmanx + 1, pacmany + 1, this);
	// break;
	// }
	// }
	//
	// private void drawPacmanDown(Graphics2D g2d) {
	//
	// switch (pacmananimpos) {
	// case 1:
	// g2d.drawImage(pacman2down, pacmanx + 1, pacmany + 1, this);
	// break;
	// case 2:
	// g2d.drawImage(pacman3down, pacmanx + 1, pacmany + 1, this);
	// break;
	// case 3:
	// g2d.drawImage(pacman4down, pacmanx + 1, pacmany + 1, this);
	// break;
	// default:
	// g2d.drawImage(pacman1, pacmanx + 1, pacmany + 1, this);
	// break;
	// }
	// }
	//
	// private void drawPacnanLeft(Graphics2D g2d) {
	//
	// switch (pacmananimpos) {
	// case 1:
	// g2d.drawImage(pacman2left, pacmanx + 1, pacmany + 1, this);
	// break;
	// case 2:
	// g2d.drawImage(pacman3left, pacmanx + 1, pacmany + 1, this);
	// break;
	// case 3:
	// g2d.drawImage(pacman4left, pacmanx + 1, pacmany + 1, this);
	// break;
	// default:
	// g2d.drawImage(pacman1, pacmanx + 1, pacmany + 1, this);
	// break;
	// }
	// }
	//
	// private void drawPacmanRight(Graphics2D g2d) {
	//
	// switch (pacmananimpos) {
	// case 1:
	// g2d.drawImage(pacman2right, pacmanx + 1, pacmany + 1, this);
	// break;
	// case 2:
	// g2d.drawImage(pacman3right, pacmanx + 1, pacmany + 1, this);
	// break;
	// case 3:
	// g2d.drawImage(pacman4right, pacmanx + 1, pacmany + 1, this);
	// break;
	// default:
	// g2d.drawImage(pacman1, pacmanx + 1, pacmany + 1, this);
	// break;
	// }
	// }
}
