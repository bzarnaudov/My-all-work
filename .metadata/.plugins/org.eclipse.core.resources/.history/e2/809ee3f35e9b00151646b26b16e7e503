package all;

import java.util.concurrent.*;

public class ParallelMax {
	public static void main(String[] args) {
		// Create a list
		final int N = 9000000;
		int[] list = new int[N];
		for (int i = 0; i < list.length; i++) {
			list[i] = i;
		}

		long startTime = System.currentTimeMillis();
		System.out.println("\nThe macimal number is " + max(list));
		long endTime = System.currentTimeMillis();
		System.out.println("The number of processors is " + Runtime.getRuntime().availableProcessors());
		System.out.println("Time is " + (endTime - startTime) + " milliseconds");
	}

	public static int max(int[] list) {
		RecursiveTask<Integer> task = new MaxTask(list, 0, list.length);
		ForkJoinPool pool = new ForkJoinPool();
		return pool.invoke(task);
	}
	
	private static class MaxTask extends RecursiveTask<Integer> {
		private final static int THRESHOLD = 1000;
		private int[] list;
		private int low;
		private int high;
		
		public MaxTask(int[] list, int low, int high) {
			this.list = list;
			this.low = low;
			this.high = high;
		}
		
		
	}
}
