package exercises;

public class Exercise11DemonstrateDeadlock {
	private Target target = new Target();
	private Bullet bullet = new Bullet();

	public static void main(String[] args) {
		
		Thread t1 = new Thread(new BulletGo());
		Thread t2 = new Thread(new TargetHitting());
	}
	
	
	
	private class Target {
		private int size;
		
		public Target() {
			this.size = 5;
		}
		
		public void setSize(int size) {
			this.size = size;
		}
		
		public void printSize() {
			System.out.println(size);
		}
	}
	
	private class Bullet {
		private int speed;
		
		public Bullet() {
			this.speed = 100;
		}
		
		public void setSpeed(int size) {
			this.speed = speed;
		}
		
		public void printSpeed() {
			System.out.println(speed);
		}
	}
	
	private class BulletGo implements Runnable {

		@Override
		public void run() {
			while (true) {
				System.out.println("going");
				synchronized (bullet) {
					bullet.setSpeed(150);
					bullet.printSpeed();
				}
				synchronized (target) {
					target.printSize();
				}
				
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	private class TargetHitting implements Runnable {

		@Override
		public void run() {
			while (true) {
				System.out.println("going");
				synchronized (bullet) {
					bullet.setSpeed(150);
					bullet.printSpeed();
				}
				synchronized (target) {
					target.printSize();
				}
				
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}
}
