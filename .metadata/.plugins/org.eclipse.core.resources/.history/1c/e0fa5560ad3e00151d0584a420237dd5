package treeAndGraphTraversal;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Scanner;

import all.DynamicList.Node;

public class Problem2RoundDance {
	
	//static LinkedList<Integer>[] graph;
	static Map<Integer, Node<Integer>> map = new HashMap<>();
	
	
	
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.print("Please write number of edges in the graph: ");
		int edgesCount = Integer.parseInt(input.nextLine());
		System.out.print("Please write first Node from whom to start: ");
		int startNode = Integer.parseInt(input.nextLine());
		Node<Integer> node = new Node<Integer>(startNode);
		map.put(startNode, node);
		for (int i = 0; i <= edgesCount; i++) {
			System.out.println("Write edge between nodes with space between them(edge " + i + ") : " );
			String[] edge = input.nextLine().split(" ");
			int firstValue = Integer.parseInt(edge[0]);
			Node<Integer> firstNode = map.get(firstValue);
			
			Tree<Integer> parentNode = nodeByValue.get(parentValue);
			int childValue = Integer.parseInt(edge[1]);
			if (isNotCorrectNode(childValue, nodesCount)) {
				break;
			}
			Tree<Integer> childNode = nodeByValue.get(childValue);
			parentNode.getChildren().add(childNode);
			childNode.setParent(parentNode);
		}
	
		
		input.close();
	}
	
	private class Node<T>{
		T element;
		LinkedList<Node<T>> childNodes;
		
		Node(T element, LinkedList<Node<T>> childNodes) {
			this.element = element;
			childNodes = new LinkedList<Node<T>>();
		}
		Node(T element) {
			this.element = element;
			childNodes = null;
		}
	}
}
