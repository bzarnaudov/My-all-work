package all;

import java.util.*;

public class Problem2ConvexHull {
	
	static Problem2Point mostLeftDownPoint;
	
	private int indexOfMostDownLeftPoint = 0;
	private List<Problem2Point> hull = new ArrayList<Problem2Point>();
	private List<Problem2Point> points = new ArrayList<Problem2Point>();
	private int numberPoints;

	private boolean orientation(Problem2Point p1, Problem2Point p2, Problem2Point p3) {
		int orientation = p1.getX() * (p2.getY() - p3.getY()) + p2.getX() * (p3.getY() - p1.getY()) 
				+ p3.getX() * (p1.getY() - p2.getY());
		if (orientation < 0)
			return false;
		return true;
	}

	public void readInput() {
		Scanner input = new Scanner(System.in);
        numberPoints = Integer.parseInt(input.nextLine());
        
        mostLeftDownPoint = new Problem2Point(Integer.MAX_VALUE, Integer.MAX_VALUE);
        
        for (int i = 0; i < numberPoints; i++) {
            String inputLine = input.nextLine();
            String[] numbers = inputLine.split(" ");
            Problem2Point current = new Problem2Point();
            current.setX(Integer.parseInt(numbers[0]));
            current.setY(Integer.parseInt(numbers[1]));
            if (current.getX() < mostLeftDownPoint.getX()) {
                mostLeftDownPoint.setX(current.getX());
                mostLeftDownPoint.setY(current.getY());
                indexOfMostDownLeftPoint = i;
            } else if (current.getX() == mostLeftDownPoint.getX()) {
                    if (current.getY() < mostLeftDownPoint.getY()) {
                        mostLeftDownPoint.setY(current.getY());
                        indexOfMostDownLeftPoint = i;
                    }
            }
            points.add(current);
        }
        input.close();
    }

	private void FindConvexHull() {
		hull.Add(mostLeftDownPoint);
		hull.Add(points[0]);
		int j = 1;
		for (int i = 1; i < numberPoints; i++) {
			if (hull.Count == 1) {
				hull.Add(points[i]);
				j++;
				i++;
			}
			if (Orientation(hull[j - 1], hull[j], points[i]) == true) {
				hull.Add(points[i]);
				j++;
			} else {
				hull.RemoveAt(j);
				i--;
				j--;
			}
		}
	}

	
}
