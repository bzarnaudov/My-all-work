package all;

import java.util.Scanner;

public class Problem2PrimesMatrixWithSieveOfEratosthenes {
	private static final int PRIMES_INTERVAL_MAX = 1000000;

	public static void main(String[] args) {
		int matrixDimensions = readInput();
		int primesNeededCount = matrixDimensions * matrixDimensions;
		int[] primeNumbers = findPrimeNumbers(primesNeededCount);
		printPrimesMatrix(primeNumbers, matrixDimensions);
	}

	private static int[] findPrimeNumbers(int primesNeededCount) {
		boolean[] notPrime = new boolean[PRIMES_INTERVAL_MAX];
        notPrime[0] = true;
        notPrime[1] = true;
        
        List<int> primeNumbers = new List<int>(primesNeededCount);
        
        for (int currentNumber = 2; currentNumber < PRIMES_INTERVAL_MAX; currentNumber++)
        {
            if (notPrime[currentNumber] == false)
            {
                primeNumbers.Add(currentNumber);
                if (primeNumbers.Count == primesNeededCount)
                {
                    break;
                }
                for (int notPrimeNumber = currentNumber * 2; notPrimeNumber < notPrime.Length; notPrimeNumber += currentNumber)
                {
                    notPrime[notPrimeNumber] = true;
                }
            }
        }

        return primeNumbers.ToArray();

	}

	private static int readInput() {
		Scanner input = new Scanner(System.in);
		String inputLine = input.nextLine();
		input.close();
		int n = 0;

		try {
			n = Integer.parseInt(inputLine);
		} catch (NumberFormatException exception) {
			System.out.println("Invalid input: " + inputLine);
		}

		if (n >= 200) {
			try {
				throw new Exception("N > 200");
			} catch (Exception e) {
				e.getMessage();
			}
		}

		return n;
	}
}
