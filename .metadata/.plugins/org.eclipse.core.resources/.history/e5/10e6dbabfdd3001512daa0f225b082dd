package pacman;

public class Pacman extends Unit {

	private String pacman1S = "pacman.png";
	private String pacman2upS = "up1.png";
	private String pacman3upS = "up2.png";
	private String pacman4upS = "up3.png";
	private String pacman2downS = "down1.png";
	private String pacman3downS = "down2.png";
	private String pacman4downS = "down3.png";
	private String pacman2leftS = "left1.png";
	private String pacman3leftS = "left2.png";
	private String pacman4leftS = "left3.png";
	private String pacman2rightS = "right1.png";
	private String pacman3rightS = "right2.png";
	private String pacman4rightS = "right3.png";
	
	private final int pacAnimationDelay = 2;
	private final int pacmanAnimationCount = 4;
	
	private int pacAnimationCount = pacAnimationDelay;
	private int pacAnimationDir = 1;
	private int pacmanAnimationPos = 0;
	
	private int requestDirectionX;
	private int requestDirectionY;
	private int drawDirectionX;
	private int drawDirectionY;

	public Pacman() {
		super.setImages(pacman1S, pacman2upS, pacman3upS, pacman4upS,
				pacman2downS, pacman3downS, pacman4downS, pacman2leftS,
				pacman3leftS, pacman4leftS, pacman2rightS, pacman3rightS,
				pacman4rightS);
	}

	public int getDrawDirectionX() {
		return drawDirectionX;
	}

	public void setDrawDirectionX(int drawDirectionX) {
		this.drawDirectionX = drawDirectionX;
	}

	public int getDrawDirectionY() {
		return drawDirectionY;
	}

	public void setDrawDirectionY(int drawDirectionY) {
		this.drawDirectionY = drawDirectionY;
	}

	public int getRequestDirectionX() {
		return requestDirectionX;
	}

	public void setRequestDirectionX(int requestDirectionX) {
		this.requestDirectionX = requestDirectionX;
	}

	public int getRequestDirectionY() {
		return requestDirectionY;
	}

	public void setRequestDirectionY(int requestDirectionY) {
		this.requestDirectionY = requestDirectionY;
	}

	public void doAnim() {

		pacAnimationCount--;

		if (pacAnimationCount <= 0) {
			pacAnimationCount = pacAnimationDelay; // make pacman to open his mouth slowly
			pacmanAnimationPos += pacAnimationDir;

			if (pacAnimationDir == (pacmanAnimationCount - 1) || pacmanAnimationPos == 0) {
				pacAnimationDir = -pacAnimationDir;
			}
		}
	}

	public void movePacman() {

		int pos;
		short ch;

		if (requestDirectionX == -directionX && requestDirectionY == -directionY) {
			directionX = requestDirectionX;
			directionY = requestDirectionY;
			drawDirectionX = directionX;
			drawDirectionY = directionY;
		}

		if (columnPosition % blocksize == 0 && rowPosition % blocksize == 0) {
			pos = columnPosition / blocksize + nrofblocks
					* (int) (rowPosition / blocksize);
			ch = screendata[pos];

			if ((ch & 16) != 0) {
				screendata[pos] = (short) (ch & 15);
				score++;
			}
			if ((ch & 32) != 0) {
				score += 49;
				killerPacman = true;
				if (remainingTimeForKill == 0) {
					timer();
				}
				remainingTimeForKill = timeForKill / 1000;
			}

			if (requestDirectionX != 0 || requestDirectionY != 0) {
				if (!((requestDirectionX == -1 && requestDirectionY == 0 && (ch & 1) != 0)
						|| (requestDirectionX == 1 && requestDirectionY == 0 && (ch & 4) != 0)
						|| (requestDirectionX == 0 && requestDirectionY == -1 && (ch & 2) != 0) || (requestDirectionX == 0
						&& requestDirectionY == 1 && (ch & 8) != 0))) {
					directionX = requestDirectionX;
					directionY = requestDirectionY;
					drawDirectionX = directionX;
					drawDirectionY = directionY;
				}
			}

			// Check for standstill
			if ((directionX == -1 && directionY == 0 && (ch & 1) != 0)
					|| (directionX == 1 && directionY == 0 && (ch & 4) != 0)
					|| (directionX == 0 && directionY == -1 && (ch & 2) != 0)
					|| (directionX == 0 && directionY == 1 && (ch & 8) != 0)) {
				directionX = 0;
				directionY = 0;
			}
		}
		columnPosition = columnPosition + speed * directionX;
		rowPosition = rowPosition + speed * directionY;
	}
	//
	// private void drawPacman(Graphics2D g2d) {
	//
	// if (drawDirectionX == -1) {
	// drawPacnanLeft(g2d);
	// } else if (drawDirectionX == 1) {
	// drawPacmanRight(g2d);
	// } else if (drawDirectionY == -1) {
	// drawPacmanUp(g2d);
	// } else {
	// drawPacmanDown(g2d);
	// }
	// }
	//
	// private void drawPacmanUp(Graphics2D g2d) {
	//
	// switch (pacmananimpos) {
	// case 1:
	// g2d.drawImage(pacman2up, columnPosition + 1, rowPosition + 1, this);
	// break;
	// case 2:
	// g2d.drawImage(pacman3up, columnPosition + 1, rowPosition + 1, this);
	// break;
	// case 3:
	// g2d.drawImage(pacman4up, columnPosition + 1, rowPosition + 1, this);
	// break;
	// default:
	// g2d.drawImage(pacman1, columnPosition + 1, rowPosition + 1, this);
	// break;
	// }
	// }
	//
	// private void drawPacmanDown(Graphics2D g2d) {
	//
	// switch (pacmananimpos) {
	// case 1:
	// g2d.drawImage(pacman2down, columnPosition + 1, rowPosition + 1, this);
	// break;
	// case 2:
	// g2d.drawImage(pacman3down, columnPosition + 1, rowPosition + 1, this);
	// break;
	// case 3:
	// g2d.drawImage(pacman4down, columnPosition + 1, rowPosition + 1, this);
	// break;
	// default:
	// g2d.drawImage(pacman1, columnPosition + 1, rowPosition + 1, this);
	// break;
	// }
	// }
	//
	// private void drawPacnanLeft(Graphics2D g2d) {
	//
	// switch (pacmananimpos) {
	// case 1:
	// g2d.drawImage(pacman2left, columnPosition + 1, rowPosition + 1, this);
	// break;
	// case 2:
	// g2d.drawImage(pacman3left, columnPosition + 1, rowPosition + 1, this);
	// break;
	// case 3:
	// g2d.drawImage(pacman4left, columnPosition + 1, rowPosition + 1, this);
	// break;
	// default:
	// g2d.drawImage(pacman1, columnPosition + 1, rowPosition + 1, this);
	// break;
	// }
	// }
	//
	// private void drawPacmanRight(Graphics2D g2d) {
	//
	// switch (pacmananimpos) {
	// case 1:
	// g2d.drawImage(pacman2right, columnPosition + 1, rowPosition + 1, this);
	// break;
	// case 2:
	// g2d.drawImage(pacman3right, columnPosition + 1, rowPosition + 1, this);
	// break;
	// case 3:
	// g2d.drawImage(pacman4right, columnPosition + 1, rowPosition + 1, this);
	// break;
	// default:
	// g2d.drawImage(pacman1, columnPosition + 1, rowPosition + 1, this);
	// break;
	// }
	// }
}
