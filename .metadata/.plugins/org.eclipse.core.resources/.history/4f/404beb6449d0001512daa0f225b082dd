package pacman;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;

public class Game extends JPanel implements ActionListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = -5566108725243282994L;

	private final int BLOCK_SIZE = 24;

	private String levelFileName;
	private Level level;
	private MapSpot[][] levelContent;
	private int screenSizeWidth;
	private int screenSizeHeight;

	private PacDot pacDot;
	private PowerDot powerDot;

	public Game() {

		initVariables();

		ControlPacman control = new ControlPacman();
		addKeyListener(control);

		setFocusable(true);
		setBackground(Color.black);
		setDoubleBuffered(true); // ???
	}

	private void initVariables() {
		levelFileName = "level0.csv";
		level = new Level(levelFileName);
		levelContent = level.getLevelContent();
		screenSizeWidth = BLOCK_SIZE * levelContent[0].length;
		screenSizeHeight = BLOCK_SIZE * levelContent.length;
		pacDot = new PacDot();
		powerDot = new PowerDot();

		// screendata = new short[nrofblocks * nrofblocks];
		// mazecolor = new Color(150, 100, 5);
		// d = new Dimension(400, 400);
		// ghostx = new int[nrofghosts];
		// ghostdx = new int[nrofghosts];
		// ghosty = new int[nrofghosts];
		// ghostdy = new int[nrofghosts];
		// ghostspeed = new int[nrofghosts];
		// dx = new int[4];
		// dy = new int[4];
		//
		// timer = new Timer(40, this);
		// timer.start();
	}

	public int getScreenSizeWidth() {
		return screenSizeWidth;
	}

	public int getScreenSizeHeight() {
		return screenSizeHeight;
	}

	@Override
	public void actionPerformed(ActionEvent e) {

		repaint();
	}

	//
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);

		doDrawing(g);
	}

	//
	private void doDrawing(Graphics g) {

		Graphics2D g2d = (Graphics2D) g;

		g2d.setColor(Color.black);

		drawMaze(g2d);
		drawScore(g2d);
		drawTimeForKill(g2d);
		// doAnim();
		// playGame(g2d);

		// g2d.drawImage(ii, 5, 5, this);
		Toolkit.getDefaultToolkit().sync();
		g2d.dispose();
	}

	private void drawMaze(Graphics2D g2d) {

		int row = 0, column = 0;

		for (int y = 0; y < screenSizeHeight; y += BLOCK_SIZE) {
			for (int x = 0; x < screenSizeWidth; x += BLOCK_SIZE) {
				g2d.setColor(level.getColor());
				g2d.setStroke(new BasicStroke(2));

				if (levelContent[row][column].hasLeftWall() == true) {
					g2d.drawLine(x, y, x, y + BLOCK_SIZE - 1);
				}

				if (levelContent[row][column].hasTopWall() == true) {
					g2d.drawLine(x, y, x + BLOCK_SIZE - 1, y);
				}

				if (levelContent[row][column].hasRightWall() == true) {
					g2d.drawLine(x + BLOCK_SIZE - 1, y, x + BLOCK_SIZE - 1, y
							+ BLOCK_SIZE - 1);
				}

				if (levelContent[row][column].hasBottomWall() == true) {
					g2d.drawLine(x, y + BLOCK_SIZE - 1, x + BLOCK_SIZE - 1, y
							+ BLOCK_SIZE - 1);
				}

				if (levelContent[row][column].hasDot() == true) {
					g2d.setColor(pacDot.getColor());
					g2d.fillRect(x + 11, y + 11, pacDot.getSize(),
							pacDot.getSize());
				}

				if (levelContent[row][column].hasPowerDot() == true) {
					g2d.setColor(powerDot.getColor());
					g2d.fillRect(x + 6, y + 6, powerDot.getSize(),
							powerDot.getSize());
				}
				column++;
			}
			column = 0;
			row++;
		}
	}

	private void drawScore(Graphics2D g) {
		String s;
		Score score = new Score();
		g.setFont(score.getFont());
		g.setColor(score.getColor());
		s = "Score: " + score.getScore();
		g.drawString(s, screenSizeHeight / 2 + 96, screenSizeWidth + 16);
	}

	private void drawTimeForKill(Graphics2D g) {
		String s;
		g.setFont(smallfont);
		g.setColor(new Color(196, 128, 255));
		s = "Remaining time to kill: " + remainingTimeForKill;
		g.drawString(s, scrsize / 15, scrsize + 16);

	}

	//
	// private void loadImages() {
	//
	// ghost = new ImageIcon(this.getClass().getResource(ghostS)).getImage();
	// pacman1 = new ImageIcon(this.getClass().getResource(pacman1S))
	// .getImage();
	// pacman2up = new ImageIcon(this.getClass().getResource(pacman2upS))
	// .getImage();
	// pacman3up = new ImageIcon(this.getClass().getResource(pacman3upS))
	// .getImage();
	// pacman4up = new ImageIcon(this.getClass().getResource(pacman4upS))
	// .getImage();
	// pacman2down = new ImageIcon(this.getClass().getResource(pacman2downS))
	// .getImage();
	// pacman3down = new ImageIcon(this.getClass().getResource(pacman3downS))
	// .getImage();
	// pacman4down = new ImageIcon(this.getClass().getResource(pacman4downS))
	// .getImage();
	// pacman2left = new ImageIcon(this.getClass().getResource(pacman2leftS))
	// .getImage();
	// pacman3left = new ImageIcon(this.getClass().getResource(pacman3leftS))
	// .getImage();
	// pacman4left = new ImageIcon(this.getClass().getResource(pacman4leftS))
	// .getImage();
	// pacman2right = new ImageIcon(this.getClass().getResource(pacman2rightS))
	// .getImage();
	// pacman3right = new ImageIcon(this.getClass().getResource(pacman3rightS))
	// .getImage();
	// pacman4right = new ImageIcon(this.getClass().getResource(pacman4rightS))
	// .getImage();
	//
	// }
	//

	//
	//
	// @Override
	// public void addNotify() {
	// super.addNotify();
	//
	// initGame();
	// }
	//
	// private void initGame() {
	//
	// score = 0;
	// initLevel();
	// }
	//
	// private void playGame(Graphics2D g2d) {
	//
	// if (dying) {
	//
	// death();
	//
	// } else {
	//
	// movePacman();
	// drawPacman(g2d);
	// moveGhosts(g2d);
	// checkMaze();
	// }
	// }
	//

	//
	// private void timer() {
	// int delay = 1000;
	// timer1 = new Timer(delay, new ActionListener() {
	// public void actionPerformed(ActionEvent evt) {
	// loweringRemainingTimeForKill();
	// if (remainingTimeForKill < 1) {
	// killerPacman = false;
	// timer1.stop();
	// }
	// }
	// });
	// timer1.start();
	// }
	//
	// private void loweringRemainingTimeForKill() {
	// remainingTimeForKill -= 1;
	// }
	//

	//
	// private void death() {
	// score = 0;
	// initLevel();
	// }

}
