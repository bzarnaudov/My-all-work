package all;

import java.util.concurrent.*;
import java.util.concurrent.locks.*;

public class ThreadCooperation {
	private static Account account = new Account();
	
	public static void main(String[] args) {
		// Create a thread pool with two threads
		ExecutorService executor = Executors.newFixedThreadPool(2);
		
		executor.execute(new DepositTast());
		executor.execute(new WithdrawTask());
		executor.shutdown();
		
		System.out.println("Thread 1\t\tThread 2\t\tBalance");
	}

	// A thread for adding a penny to the account
	private static class AddPennyTask implements Runnable {
		public void run() {
			account.deposit(1);
		}	
	}
	
	// An inner class for account
	private static class Account {
		private static Lock lock = new ReentrantLock(); // Create a lock
		private int balance = 0;
		
		public int getBalance() {
			return balance;
		}
		
		public void deposit(int amount) {
			lock.lock(); // Acquire the lock
			try {
				int newBalance = balance + amount;
				
				// This delay is deliberately added to magnify
				// the data-corruption problem and make it easy to see
				Thread.sleep(5);
				
				balance = newBalance;
			} catch (InterruptedException ex) {
			} finally {
				lock.unlock(); // Release the lock
			}
		}
	}

}
