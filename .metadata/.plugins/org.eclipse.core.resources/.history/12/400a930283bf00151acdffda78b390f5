package exercises;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;

import javax.swing.JOptionPane;

public class Exercise18ParallelEightQueens {
	public static ArrayList<String> list = new ArrayList<String>();

	public static void main(String[] args) {
		Exercise18ParallelEightQueens test = new Exercise18ParallelEightQueens();
		long startTime = System.currentTimeMillis();
		parallelAllEightQueens();
		long endTime = System.currentTimeMillis();
		System.out.println("\nParallel time with "
				+ Runtime.getRuntime().availableProcessors()
				+ " processors is " + (endTime - startTime) + " milliseconds");
	}

	private static void parallelAllEightQueens() {
		ExecutorService executor = Executors.newFixedThreadPool(8);
		for (int i = 0; i < 8; i++) {
			executor.execute(new RunOnSeparateThread());
		}
		executor.shutdown();
	}
	
	
	
	private class RunOnSeparateThread implements Runnable {
		public void run() {
			if (!search()) // Search for a solution
				System.out.println("No solution found");		
		}
	}
	
	boolean paused = true;
	int k = 0;

	/** Search for a solution */
	private boolean search() {
		// k - 1 indicates the number of queens placed so far
		// We are looking for a position in the kth row to place a queen
		while (k >= 0 && k <= 7) {
			chessBoard.repaint();
			while (paused) {
				try {
					Thread.sleep(5);
				} catch (Exception ex) {
				}
			}

			paused = true;

			// Find a position to place a queen in the kth row
			int j = findPosition(k);
			if (j < 0) {
				queens[k] = -1;
				k--; // back track to the previous row
			} else {
				queens[k] = j;
				k++;
			}

		}

		if (k == -1)
			return false; // No solution
		else
			return true; // A solution is found
	}

	public int findPosition(int k) {
		int start = queens[k] + 1; // Search for a new placement

		for (int j = start; j < 8; j++) {
			if (isValid(k, j))
				return j; // (k, j) is the place to put the queen now
		}

		return -1;
	}

	/** Return true if a queen can be placed at (row, column) */
	public boolean isValid(int row, int column) {
		for (int i = 1; i <= row; i++)
			if (queens[row - i] == column // Check column
					|| queens[row - i] == column - i // Check upleft diagonal
					|| queens[row - i] == column + i) // Check upright diagonal
				return false; // There is a conflict
		return true; // No conflict
	}
	
	
}
