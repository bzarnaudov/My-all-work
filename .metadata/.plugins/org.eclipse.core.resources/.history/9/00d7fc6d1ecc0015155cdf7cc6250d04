package pacman;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;

public class Game extends JPanel implements ActionListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = -5566108725243282994L;

	public Game() {

		loadImages();
		initVariables();
		
		ControlPacman control = new ControlPacman();
		addKeyListener(control);

		setFocusable(true);
		setBackground(Color.black);
		setDoubleBuffered(true); // ???
	}

	@Override
	public void actionPerformed(ActionEvent e) {

		repaint();
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);

		doDrawing(g);
	}

	private void doDrawing(Graphics g) {

		Graphics2D g2d = (Graphics2D) g;

		g2d.setColor(Color.black);
		g2d.fillRect(0, 0, d.width, d.height);

		drawMaze(g2d);
		drawScore(g2d);
		drawTimeForKill(g2d);
		doAnim();
		playGame(g2d);

		g2d.drawImage(ii, 5, 5, this);
		Toolkit.getDefaultToolkit().sync();
		g2d.dispose();
	}
	
	private void loadImages() {

		ghost = new ImageIcon(this.getClass().getResource(ghostS)).getImage();
		pacman1 = new ImageIcon(this.getClass().getResource(pacman1S))
				.getImage();
		pacman2up = new ImageIcon(this.getClass().getResource(pacman2upS))
				.getImage();
		pacman3up = new ImageIcon(this.getClass().getResource(pacman3upS))
				.getImage();
		pacman4up = new ImageIcon(this.getClass().getResource(pacman4upS))
				.getImage();
		pacman2down = new ImageIcon(this.getClass().getResource(pacman2downS))
				.getImage();
		pacman3down = new ImageIcon(this.getClass().getResource(pacman3downS))
				.getImage();
		pacman4down = new ImageIcon(this.getClass().getResource(pacman4downS))
				.getImage();
		pacman2left = new ImageIcon(this.getClass().getResource(pacman2leftS))
				.getImage();
		pacman3left = new ImageIcon(this.getClass().getResource(pacman3leftS))
				.getImage();
		pacman4left = new ImageIcon(this.getClass().getResource(pacman4leftS))
				.getImage();
		pacman2right = new ImageIcon(this.getClass().getResource(pacman2rightS))
				.getImage();
		pacman3right = new ImageIcon(this.getClass().getResource(pacman3rightS))
				.getImage();
		pacman4right = new ImageIcon(this.getClass().getResource(pacman4rightS))
				.getImage();

	}
	
	private void initGame() {

		score = 0;
		initLevel();
	}
	
	private void drawMaze(Graphics2D g2d) {

		short i = 0;
		int x, y;

		for (y = 0; y < scrsize; y += blocksize) {
			for (x = 0; x < scrsize; x += blocksize) {

				g2d.setColor(mazecolor);
				g2d.setStroke(new BasicStroke(2));

				if ((screendata[i] & 1) != 0) {
					g2d.drawLine(x, y, x, y + blocksize - 1);
				}

				if ((screendata[i] & 2) != 0) {
					g2d.drawLine(x, y, x + blocksize - 1, y);
				}

				if ((screendata[i] & 4) != 0) {
					g2d.drawLine(x + blocksize - 1, y, x + blocksize - 1, y
							+ blocksize - 1);
				}

				if ((screendata[i] & 8) != 0) {
					g2d.drawLine(x, y + blocksize - 1, x + blocksize - 1, y
							+ blocksize - 1);
				}

				if ((screendata[i] & 16) != 0) {
					g2d.setColor(dotcolor);
					g2d.fillRect(x + 11, y + 11, 2, 2);
				}

				if ((screendata[i] & 32) != 0) {
					g2d.setColor(dotcolor1);
					g2d.fillRect(x + 6, y + 6, 12, 12);
				}

				i++;
			}
		}
	}
	
}
