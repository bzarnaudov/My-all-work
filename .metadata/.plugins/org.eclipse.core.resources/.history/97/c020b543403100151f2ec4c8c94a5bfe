package treesAndTreeLikeStructures;

import java.util.ArrayList;
import java.util.Dictionary;
import java.util.Scanner;

import javax.xml.bind.ParseConversionEvent;

public class Problem1PlayWithTrees<T> {
	
	private T value;
	private Problem1PlayWithTrees<T> parent;
	private ArrayList<Problem1PlayWithTrees<T>> children;
	
	public Problem1PlayWithTrees(T value) {
		if (value == null) {
			throw new IllegalArgumentException(
			"Cannot insert null value!");
		}
		this.value = value;
	}
	
	@SuppressWarnings("unchecked")
	public Problem1PlayWithTrees(T value, Problem1PlayWithTrees<T> ...children) {
		this.value = value;
		this.children = new ArrayList<Problem1PlayWithTrees<T>>();
		
		for (Problem1PlayWithTrees<T> child : children) {
			this.children.add(child);
			child.parent = this;
		}
	}
	
//	public static Dictionary<Integer, Problem1PlayWithTrees<Integer>> nodeByValue = new Dictionary<Integer, Problem1PlayWithTrees<Integer>>();
	
	public T getValue() {
		return value;
	}

	public void setValue(T value) {
		this.value = value;
	}

	public Problem1PlayWithTrees<T> getParent() {
		return parent;
	}

	public void setParent(Problem1PlayWithTrees<T> parent) {
		this.parent = parent;
	}

	public static void main(String[] args) {
//		public static Dictionary<Integer, Problem1PlayWithTrees<Integer>> nodeNyValude = new Dictionary<Integer, Problem1PlayWithTrees<Integer>>();
		Scanner input = new Scanner(System.in);
		System.out.print("Please write number of nodes in the tree : ");
		int nodesCount = input.nextInt();
		for ( int i = 1; i < nodesCount; i++) {
			System.out.println("Write parent and child with space between them");
			String[] edge = input.nextLine().split(" ");
			int parentValue = Integer.parseInt(edge[0]);
			Problem1PlayWithTrees<Integer> parentNode = getTreeNodeByValue(parentValue);
			int childValue = Integer.parseInt(edge[1]);
			Problem1PlayWithTrees<Integer> childNode = getTreeNodeByValue(childValue);
			parentNode.children.add(childNode);
			childNode.parent = parentNode;
		
		}
		
		
		
		
	}

	private static Problem1PlayWithTrees<Integer> getTreeNodeByValue(
			int value) {
		return null;
	}

	
}

